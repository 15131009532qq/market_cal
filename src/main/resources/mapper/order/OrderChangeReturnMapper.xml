<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.mudule.mumzonemarketcal.component.mapper.order.OrderChangeReturnMapper" >
  <resultMap id="BaseResultMap" type="com.mudule.mumzonemarketcal.component.po.order.OrderChangeReturn" >
    <id column="id" property="id" jdbcType="VARCHAR" />
    <result column="order_code" property="orderCode" jdbcType="VARCHAR" />
    <result column="member_company_id" property="memberCompanyId" jdbcType="VARCHAR" />
    <result column="company_id" property="companyId" jdbcType="VARCHAR" />
    <result column="shop_id" property="shopId" jdbcType="VARCHAR" />
    <result column="phone" property="phone" jdbcType="VARCHAR" />
    <result column="order_id" property="orderId" jdbcType="VARCHAR" />
    <result column="amount" property="amount" jdbcType="DECIMAL" />
    <result column="change_amount" property="changeAmount" jdbcType="DECIMAL" />
    <result column="pay_amount" property="payAmount" jdbcType="DECIMAL" />
    <result column="return_num" property="returnNum" jdbcType="INTEGER" />
    <result column="exchange_num" property="exchangeNum" jdbcType="INTEGER" />
    <result column="order_status" property="orderStatus" jdbcType="TINYINT" />
    <result column="order_type" property="orderType" jdbcType="TINYINT" />
    <result column="dl" property="dl" jdbcType="TINYINT" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="remark" property="remark" jdbcType="VARCHAR" />
    <result column="return_margin" property="returnMargin" jdbcType="DECIMAL" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.mudule.mumzonemarketcal.component.po.order.OrderChangeReturn" extends="BaseResultMap" >
    <result column="pay_type" property="payType" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, order_code, member_company_id, company_id, shop_id, phone, order_id, amount, 
    change_amount, pay_amount, return_num, exchange_num, order_status, order_type, dl, 
    create_time, update_time, remark, return_margin
  </sql>
  <sql id="Blob_Column_List" >
    pay_type
  </sql>
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="com.mudule.mumzonemarketcal.component.po.order.OrderChangeReturnExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from order_change_return
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.mudule.mumzonemarketcal.component.po.order.OrderChangeReturnExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from order_change_return
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from order_change_return
    where id = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from order_change_return
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.mudule.mumzonemarketcal.component.po.order.OrderChangeReturnExample" >
    delete from order_change_return
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.mudule.mumzonemarketcal.component.po.order.OrderChangeReturn" >
    insert into order_change_return (id, order_code, member_company_id, 
      company_id, shop_id, phone, 
      order_id, amount, change_amount, 
      pay_amount, return_num, exchange_num, 
      order_status, order_type, dl, 
      create_time, update_time, remark, 
      return_margin, pay_type)
    values (#{id,jdbcType=VARCHAR}, #{orderCode,jdbcType=VARCHAR}, #{memberCompanyId,jdbcType=VARCHAR}, 
      #{companyId,jdbcType=VARCHAR}, #{shopId,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR}, 
      #{orderId,jdbcType=VARCHAR}, #{amount,jdbcType=DECIMAL}, #{changeAmount,jdbcType=DECIMAL}, 
      #{payAmount,jdbcType=DECIMAL}, #{returnNum,jdbcType=INTEGER}, #{exchangeNum,jdbcType=INTEGER}, 
      #{orderStatus,jdbcType=TINYINT}, #{orderType,jdbcType=TINYINT}, #{dl,jdbcType=TINYINT}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, #{remark,jdbcType=VARCHAR}, 
      #{returnMargin,jdbcType=DECIMAL}, #{payType,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.mudule.mumzonemarketcal.component.po.order.OrderChangeReturn" >
    insert into order_change_return
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="orderCode != null" >
        order_code,
      </if>
      <if test="memberCompanyId != null" >
        member_company_id,
      </if>
      <if test="companyId != null" >
        company_id,
      </if>
      <if test="shopId != null" >
        shop_id,
      </if>
      <if test="phone != null" >
        phone,
      </if>
      <if test="orderId != null" >
        order_id,
      </if>
      <if test="amount != null" >
        amount,
      </if>
      <if test="changeAmount != null" >
        change_amount,
      </if>
      <if test="payAmount != null" >
        pay_amount,
      </if>
      <if test="returnNum != null" >
        return_num,
      </if>
      <if test="exchangeNum != null" >
        exchange_num,
      </if>
      <if test="orderStatus != null" >
        order_status,
      </if>
      <if test="orderType != null" >
        order_type,
      </if>
      <if test="dl != null" >
        dl,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="remark != null" >
        remark,
      </if>
      <if test="returnMargin != null" >
        return_margin,
      </if>
      <if test="payType != null" >
        pay_type,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="orderCode != null" >
        #{orderCode,jdbcType=VARCHAR},
      </if>
      <if test="memberCompanyId != null" >
        #{memberCompanyId,jdbcType=VARCHAR},
      </if>
      <if test="companyId != null" >
        #{companyId,jdbcType=VARCHAR},
      </if>
      <if test="shopId != null" >
        #{shopId,jdbcType=VARCHAR},
      </if>
      <if test="phone != null" >
        #{phone,jdbcType=VARCHAR},
      </if>
      <if test="orderId != null" >
        #{orderId,jdbcType=VARCHAR},
      </if>
      <if test="amount != null" >
        #{amount,jdbcType=DECIMAL},
      </if>
      <if test="changeAmount != null" >
        #{changeAmount,jdbcType=DECIMAL},
      </if>
      <if test="payAmount != null" >
        #{payAmount,jdbcType=DECIMAL},
      </if>
      <if test="returnNum != null" >
        #{returnNum,jdbcType=INTEGER},
      </if>
      <if test="exchangeNum != null" >
        #{exchangeNum,jdbcType=INTEGER},
      </if>
      <if test="orderStatus != null" >
        #{orderStatus,jdbcType=TINYINT},
      </if>
      <if test="orderType != null" >
        #{orderType,jdbcType=TINYINT},
      </if>
      <if test="dl != null" >
        #{dl,jdbcType=TINYINT},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="remark != null" >
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="returnMargin != null" >
        #{returnMargin,jdbcType=DECIMAL},
      </if>
      <if test="payType != null" >
        #{payType,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.mudule.mumzonemarketcal.component.po.order.OrderChangeReturnExample" resultType="java.lang.Integer" >
    select count(*) from order_change_return
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update order_change_return
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=VARCHAR},
      </if>
      <if test="record.orderCode != null" >
        order_code = #{record.orderCode,jdbcType=VARCHAR},
      </if>
      <if test="record.memberCompanyId != null" >
        member_company_id = #{record.memberCompanyId,jdbcType=VARCHAR},
      </if>
      <if test="record.companyId != null" >
        company_id = #{record.companyId,jdbcType=VARCHAR},
      </if>
      <if test="record.shopId != null" >
        shop_id = #{record.shopId,jdbcType=VARCHAR},
      </if>
      <if test="record.phone != null" >
        phone = #{record.phone,jdbcType=VARCHAR},
      </if>
      <if test="record.orderId != null" >
        order_id = #{record.orderId,jdbcType=VARCHAR},
      </if>
      <if test="record.amount != null" >
        amount = #{record.amount,jdbcType=DECIMAL},
      </if>
      <if test="record.changeAmount != null" >
        change_amount = #{record.changeAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.payAmount != null" >
        pay_amount = #{record.payAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.returnNum != null" >
        return_num = #{record.returnNum,jdbcType=INTEGER},
      </if>
      <if test="record.exchangeNum != null" >
        exchange_num = #{record.exchangeNum,jdbcType=INTEGER},
      </if>
      <if test="record.orderStatus != null" >
        order_status = #{record.orderStatus,jdbcType=TINYINT},
      </if>
      <if test="record.orderType != null" >
        order_type = #{record.orderType,jdbcType=TINYINT},
      </if>
      <if test="record.dl != null" >
        dl = #{record.dl,jdbcType=TINYINT},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null" >
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.remark != null" >
        remark = #{record.remark,jdbcType=VARCHAR},
      </if>
      <if test="record.returnMargin != null" >
        return_margin = #{record.returnMargin,jdbcType=DECIMAL},
      </if>
      <if test="record.payType != null" >
        pay_type = #{record.payType,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
    update order_change_return
    set id = #{record.id,jdbcType=VARCHAR},
      order_code = #{record.orderCode,jdbcType=VARCHAR},
      member_company_id = #{record.memberCompanyId,jdbcType=VARCHAR},
      company_id = #{record.companyId,jdbcType=VARCHAR},
      shop_id = #{record.shopId,jdbcType=VARCHAR},
      phone = #{record.phone,jdbcType=VARCHAR},
      order_id = #{record.orderId,jdbcType=VARCHAR},
      amount = #{record.amount,jdbcType=DECIMAL},
      change_amount = #{record.changeAmount,jdbcType=DECIMAL},
      pay_amount = #{record.payAmount,jdbcType=DECIMAL},
      return_num = #{record.returnNum,jdbcType=INTEGER},
      exchange_num = #{record.exchangeNum,jdbcType=INTEGER},
      order_status = #{record.orderStatus,jdbcType=TINYINT},
      order_type = #{record.orderType,jdbcType=TINYINT},
      dl = #{record.dl,jdbcType=TINYINT},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      remark = #{record.remark,jdbcType=VARCHAR},
      return_margin = #{record.returnMargin,jdbcType=DECIMAL},
      pay_type = #{record.payType,jdbcType=LONGVARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update order_change_return
    set id = #{record.id,jdbcType=VARCHAR},
      order_code = #{record.orderCode,jdbcType=VARCHAR},
      member_company_id = #{record.memberCompanyId,jdbcType=VARCHAR},
      company_id = #{record.companyId,jdbcType=VARCHAR},
      shop_id = #{record.shopId,jdbcType=VARCHAR},
      phone = #{record.phone,jdbcType=VARCHAR},
      order_id = #{record.orderId,jdbcType=VARCHAR},
      amount = #{record.amount,jdbcType=DECIMAL},
      change_amount = #{record.changeAmount,jdbcType=DECIMAL},
      pay_amount = #{record.payAmount,jdbcType=DECIMAL},
      return_num = #{record.returnNum,jdbcType=INTEGER},
      exchange_num = #{record.exchangeNum,jdbcType=INTEGER},
      order_status = #{record.orderStatus,jdbcType=TINYINT},
      order_type = #{record.orderType,jdbcType=TINYINT},
      dl = #{record.dl,jdbcType=TINYINT},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      remark = #{record.remark,jdbcType=VARCHAR},
      return_margin = #{record.returnMargin,jdbcType=DECIMAL}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.mudule.mumzonemarketcal.component.po.order.OrderChangeReturn" >
    update order_change_return
    <set >
      <if test="orderCode != null" >
        order_code = #{orderCode,jdbcType=VARCHAR},
      </if>
      <if test="memberCompanyId != null" >
        member_company_id = #{memberCompanyId,jdbcType=VARCHAR},
      </if>
      <if test="companyId != null" >
        company_id = #{companyId,jdbcType=VARCHAR},
      </if>
      <if test="shopId != null" >
        shop_id = #{shopId,jdbcType=VARCHAR},
      </if>
      <if test="phone != null" >
        phone = #{phone,jdbcType=VARCHAR},
      </if>
      <if test="orderId != null" >
        order_id = #{orderId,jdbcType=VARCHAR},
      </if>
      <if test="amount != null" >
        amount = #{amount,jdbcType=DECIMAL},
      </if>
      <if test="changeAmount != null" >
        change_amount = #{changeAmount,jdbcType=DECIMAL},
      </if>
      <if test="payAmount != null" >
        pay_amount = #{payAmount,jdbcType=DECIMAL},
      </if>
      <if test="returnNum != null" >
        return_num = #{returnNum,jdbcType=INTEGER},
      </if>
      <if test="exchangeNum != null" >
        exchange_num = #{exchangeNum,jdbcType=INTEGER},
      </if>
      <if test="orderStatus != null" >
        order_status = #{orderStatus,jdbcType=TINYINT},
      </if>
      <if test="orderType != null" >
        order_type = #{orderType,jdbcType=TINYINT},
      </if>
      <if test="dl != null" >
        dl = #{dl,jdbcType=TINYINT},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="remark != null" >
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="returnMargin != null" >
        return_margin = #{returnMargin,jdbcType=DECIMAL},
      </if>
      <if test="payType != null" >
        pay_type = #{payType,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.mudule.mumzonemarketcal.component.po.order.OrderChangeReturn" >
    update order_change_return
    set order_code = #{orderCode,jdbcType=VARCHAR},
      member_company_id = #{memberCompanyId,jdbcType=VARCHAR},
      company_id = #{companyId,jdbcType=VARCHAR},
      shop_id = #{shopId,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=VARCHAR},
      order_id = #{orderId,jdbcType=VARCHAR},
      amount = #{amount,jdbcType=DECIMAL},
      change_amount = #{changeAmount,jdbcType=DECIMAL},
      pay_amount = #{payAmount,jdbcType=DECIMAL},
      return_num = #{returnNum,jdbcType=INTEGER},
      exchange_num = #{exchangeNum,jdbcType=INTEGER},
      order_status = #{orderStatus,jdbcType=TINYINT},
      order_type = #{orderType,jdbcType=TINYINT},
      dl = #{dl,jdbcType=TINYINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      remark = #{remark,jdbcType=VARCHAR},
      return_margin = #{returnMargin,jdbcType=DECIMAL},
      pay_type = #{payType,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.mudule.mumzonemarketcal.component.po.order.OrderChangeReturn" >
    update order_change_return
    set order_code = #{orderCode,jdbcType=VARCHAR},
      member_company_id = #{memberCompanyId,jdbcType=VARCHAR},
      company_id = #{companyId,jdbcType=VARCHAR},
      shop_id = #{shopId,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=VARCHAR},
      order_id = #{orderId,jdbcType=VARCHAR},
      amount = #{amount,jdbcType=DECIMAL},
      change_amount = #{changeAmount,jdbcType=DECIMAL},
      pay_amount = #{payAmount,jdbcType=DECIMAL},
      return_num = #{returnNum,jdbcType=INTEGER},
      exchange_num = #{exchangeNum,jdbcType=INTEGER},
      order_status = #{orderStatus,jdbcType=TINYINT},
      order_type = #{orderType,jdbcType=TINYINT},
      dl = #{dl,jdbcType=TINYINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      remark = #{remark,jdbcType=VARCHAR},
      return_margin = #{returnMargin,jdbcType=DECIMAL}
    where id = #{id,jdbcType=VARCHAR}
  </update>
</mapper>