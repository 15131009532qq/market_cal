<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.mudule.mumzonemarketcal.component.mapper.member.MemberAccountFlowMapper" >
  <resultMap id="BaseResultMap" type="com.mudule.mumzonemarketcal.component.po.member.MemberAccountFlow" >
    <id column="id" property="id" jdbcType="VARCHAR" />
    <result column="company_id" property="companyId" jdbcType="VARCHAR" />
    <result column="shop_id" property="shopId" jdbcType="VARCHAR" />
    <result column="member_company_id" property="memberCompanyId" jdbcType="VARCHAR" />
    <result column="trans_no" property="transNo" jdbcType="VARCHAR" />
    <result column="third_no" property="thirdNo" jdbcType="VARCHAR" />
    <result column="start_amount" property="startAmount" jdbcType="DECIMAL" />
    <result column="end_amount" property="endAmount" jdbcType="DECIMAL" />
    <result column="amount" property="amount" jdbcType="DECIMAL" />
    <result column="status" property="status" jdbcType="TINYINT" />
    <result column="deal_type" property="dealType" jdbcType="TINYINT" />
    <result column="remark" property="remark" jdbcType="VARCHAR" />
    <result column="order_id" property="orderId" jdbcType="VARCHAR" />
    <result column="pay_type" property="payType" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, company_id, shop_id, member_company_id, trans_no, third_no, start_amount, end_amount, 
    amount, status, deal_type, remark, order_id, pay_type, create_time, update_time
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.mudule.mumzonemarketcal.component.po.member.MemberAccountFlowExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from member_account_flow
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from member_account_flow
    where id = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from member_account_flow
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.mudule.mumzonemarketcal.component.po.member.MemberAccountFlowExample" >
    delete from member_account_flow
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.mudule.mumzonemarketcal.component.po.member.MemberAccountFlow" >
    insert into member_account_flow (id, company_id, shop_id, 
      member_company_id, trans_no, third_no, 
      start_amount, end_amount, amount, 
      status, deal_type, remark, 
      order_id, pay_type, create_time, 
      update_time)
    values (#{id,jdbcType=VARCHAR}, #{companyId,jdbcType=VARCHAR}, #{shopId,jdbcType=VARCHAR}, 
      #{memberCompanyId,jdbcType=VARCHAR}, #{transNo,jdbcType=VARCHAR}, #{thirdNo,jdbcType=VARCHAR}, 
      #{startAmount,jdbcType=DECIMAL}, #{endAmount,jdbcType=DECIMAL}, #{amount,jdbcType=DECIMAL}, 
      #{status,jdbcType=TINYINT}, #{dealType,jdbcType=TINYINT}, #{remark,jdbcType=VARCHAR}, 
      #{orderId,jdbcType=VARCHAR}, #{payType,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.mudule.mumzonemarketcal.component.po.member.MemberAccountFlow" >
    insert into member_account_flow
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="companyId != null" >
        company_id,
      </if>
      <if test="shopId != null" >
        shop_id,
      </if>
      <if test="memberCompanyId != null" >
        member_company_id,
      </if>
      <if test="transNo != null" >
        trans_no,
      </if>
      <if test="thirdNo != null" >
        third_no,
      </if>
      <if test="startAmount != null" >
        start_amount,
      </if>
      <if test="endAmount != null" >
        end_amount,
      </if>
      <if test="amount != null" >
        amount,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="dealType != null" >
        deal_type,
      </if>
      <if test="remark != null" >
        remark,
      </if>
      <if test="orderId != null" >
        order_id,
      </if>
      <if test="payType != null" >
        pay_type,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="companyId != null" >
        #{companyId,jdbcType=VARCHAR},
      </if>
      <if test="shopId != null" >
        #{shopId,jdbcType=VARCHAR},
      </if>
      <if test="memberCompanyId != null" >
        #{memberCompanyId,jdbcType=VARCHAR},
      </if>
      <if test="transNo != null" >
        #{transNo,jdbcType=VARCHAR},
      </if>
      <if test="thirdNo != null" >
        #{thirdNo,jdbcType=VARCHAR},
      </if>
      <if test="startAmount != null" >
        #{startAmount,jdbcType=DECIMAL},
      </if>
      <if test="endAmount != null" >
        #{endAmount,jdbcType=DECIMAL},
      </if>
      <if test="amount != null" >
        #{amount,jdbcType=DECIMAL},
      </if>
      <if test="status != null" >
        #{status,jdbcType=TINYINT},
      </if>
      <if test="dealType != null" >
        #{dealType,jdbcType=TINYINT},
      </if>
      <if test="remark != null" >
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="orderId != null" >
        #{orderId,jdbcType=VARCHAR},
      </if>
      <if test="payType != null" >
        #{payType,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.mudule.mumzonemarketcal.component.po.member.MemberAccountFlowExample" resultType="java.lang.Integer" >
    select count(*) from member_account_flow
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update member_account_flow
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=VARCHAR},
      </if>
      <if test="record.companyId != null" >
        company_id = #{record.companyId,jdbcType=VARCHAR},
      </if>
      <if test="record.shopId != null" >
        shop_id = #{record.shopId,jdbcType=VARCHAR},
      </if>
      <if test="record.memberCompanyId != null" >
        member_company_id = #{record.memberCompanyId,jdbcType=VARCHAR},
      </if>
      <if test="record.transNo != null" >
        trans_no = #{record.transNo,jdbcType=VARCHAR},
      </if>
      <if test="record.thirdNo != null" >
        third_no = #{record.thirdNo,jdbcType=VARCHAR},
      </if>
      <if test="record.startAmount != null" >
        start_amount = #{record.startAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.endAmount != null" >
        end_amount = #{record.endAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.amount != null" >
        amount = #{record.amount,jdbcType=DECIMAL},
      </if>
      <if test="record.status != null" >
        status = #{record.status,jdbcType=TINYINT},
      </if>
      <if test="record.dealType != null" >
        deal_type = #{record.dealType,jdbcType=TINYINT},
      </if>
      <if test="record.remark != null" >
        remark = #{record.remark,jdbcType=VARCHAR},
      </if>
      <if test="record.orderId != null" >
        order_id = #{record.orderId,jdbcType=VARCHAR},
      </if>
      <if test="record.payType != null" >
        pay_type = #{record.payType,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null" >
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update member_account_flow
    set id = #{record.id,jdbcType=VARCHAR},
      company_id = #{record.companyId,jdbcType=VARCHAR},
      shop_id = #{record.shopId,jdbcType=VARCHAR},
      member_company_id = #{record.memberCompanyId,jdbcType=VARCHAR},
      trans_no = #{record.transNo,jdbcType=VARCHAR},
      third_no = #{record.thirdNo,jdbcType=VARCHAR},
      start_amount = #{record.startAmount,jdbcType=DECIMAL},
      end_amount = #{record.endAmount,jdbcType=DECIMAL},
      amount = #{record.amount,jdbcType=DECIMAL},
      status = #{record.status,jdbcType=TINYINT},
      deal_type = #{record.dealType,jdbcType=TINYINT},
      remark = #{record.remark,jdbcType=VARCHAR},
      order_id = #{record.orderId,jdbcType=VARCHAR},
      pay_type = #{record.payType,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.mudule.mumzonemarketcal.component.po.member.MemberAccountFlow" >
    update member_account_flow
    <set >
      <if test="companyId != null" >
        company_id = #{companyId,jdbcType=VARCHAR},
      </if>
      <if test="shopId != null" >
        shop_id = #{shopId,jdbcType=VARCHAR},
      </if>
      <if test="memberCompanyId != null" >
        member_company_id = #{memberCompanyId,jdbcType=VARCHAR},
      </if>
      <if test="transNo != null" >
        trans_no = #{transNo,jdbcType=VARCHAR},
      </if>
      <if test="thirdNo != null" >
        third_no = #{thirdNo,jdbcType=VARCHAR},
      </if>
      <if test="startAmount != null" >
        start_amount = #{startAmount,jdbcType=DECIMAL},
      </if>
      <if test="endAmount != null" >
        end_amount = #{endAmount,jdbcType=DECIMAL},
      </if>
      <if test="amount != null" >
        amount = #{amount,jdbcType=DECIMAL},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=TINYINT},
      </if>
      <if test="dealType != null" >
        deal_type = #{dealType,jdbcType=TINYINT},
      </if>
      <if test="remark != null" >
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="orderId != null" >
        order_id = #{orderId,jdbcType=VARCHAR},
      </if>
      <if test="payType != null" >
        pay_type = #{payType,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.mudule.mumzonemarketcal.component.po.member.MemberAccountFlow" >
    update member_account_flow
    set company_id = #{companyId,jdbcType=VARCHAR},
      shop_id = #{shopId,jdbcType=VARCHAR},
      member_company_id = #{memberCompanyId,jdbcType=VARCHAR},
      trans_no = #{transNo,jdbcType=VARCHAR},
      third_no = #{thirdNo,jdbcType=VARCHAR},
      start_amount = #{startAmount,jdbcType=DECIMAL},
      end_amount = #{endAmount,jdbcType=DECIMAL},
      amount = #{amount,jdbcType=DECIMAL},
      status = #{status,jdbcType=TINYINT},
      deal_type = #{dealType,jdbcType=TINYINT},
      remark = #{remark,jdbcType=VARCHAR},
      order_id = #{orderId,jdbcType=VARCHAR},
      pay_type = #{payType,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=VARCHAR}
  </update>
</mapper>